/*Minimum Cost Path
Difficulty: HardAccuracy: 26.99%Submissions: 89K+Points: 8
Given a square grid of size N, each cell of which contains an integer cost that represents a cost to traverse through that cell, we need to find a path from the top left cell to the bottom right cell by which the total cost incurred is minimum.
From the cell (i,j) we can go (i,j-1), (i, j+1), (i-1, j), (i+1, j).  

Examples :

Input: grid = {{9,4,9,9},{6,7,6,4},{8,3,3,7},{7,4,9,10}}
Output: 43
Explanation: The grid is-
9 4 9 9
6 7 6 4
8 3 3 7
7 4 9 10
The minimum cost is-
9 + 4 + 7 + 3 + 3 + 7 + 10 = 43.
Input: grid = {{4,4},{3,7}}
Output: 14
Explanation: The grid is-
4 4
3 7
The minimum cost is- 4 + 3 + 7 = 14.
Expected Time Complexity: O(n2*log(n))
Expected Auxiliary Space: O(n2) 
 Constraints:
1 ≤ n ≤ 500
1 ≤ cost of cells ≤ 500 */

class Solution
{
    public:
    
    #define p pair<int,pair<int,int>>
    int minimumCostPath(vector<vector<int>>& grid)
    {
        int n=grid.size(),m=grid[0].size();
        priority_queue<p,vector<p>,greater<p>>pq;
                
        vector<vector<int>>dij(n,vector<int>(m,1e9));
        dij[0][0]=0;
        pq.push({grid[0][0],{0,0}});
        int drow[]={1,-1,0,0};
        int dcol[]={0,0,1,-1};
        while(!pq.empty())
        {
          auto it=pq.top();
          int dist=it.first;
          int row=it.second.first;
          int col=it.second.second;
          pq.pop();
          if(row==n-1 && col==m-1)return dij[n-1][m-1];
            for(int i=0;i<4;i++){
                int nrow=row+drow[i];
                int ncol=col+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m )
                {
                    if(dist+grid[nrow][ncol]<dij[nrow][ncol])
                    {
                        dij[nrow][ncol]=dist+grid[nrow][ncol];
                        pq.push({dij[nrow][ncol],{nrow,ncol}});
                    }
                }
            }
        }
        return -1;
    }
};
