/*
Two Swaps
Difficulty: EasyAccuracy: 56.03%Submissions: 4K+Points: 2
Given a permutation of some of the first natural numbers in an array arr[], determine if the array can be sorted in exactly two swaps. A swap can involve the same pair of indices twice.

Return true if it is possible to sort the array with exactly two swaps, otherwise return false.

Examples:

Input: arr = [4, 3, 2, 1]
Output: true
Explanation: First, swap arr[0] and arr[3]. The array becomes [1, 3, 2, 4]. Then, swap arr[1] and arr[2]. The array becomes [1, 2, 3, 4], which is sorted.
Input: arr = [4, 3, 1, 2]
Output: false
Explanation: It is not possible to sort the array with exactly two swaps.
Constraints:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ arr.size()
*/

class Solution {
  public:
    bool checkSorted(vector<int> &arr) {
         int n = arr.size();
        int swapCnt = 0;
        
        for(int i=0;i<n;i++){
            // if curr element is correct position then continue.
            if(arr[i] == i+1) continue;
            
            // if curr element is not correct position then try to 
            // do correct position using swap.
            while(arr[i] != i+1){
                swap(arr[arr[i] - 1],arr[i]);
                swapCnt++;
            }
        }
        
        // arr is already swap or swapCnt equal to 2.
        if(swapCnt == 2 || swapCnt == 0) return true;
        return false;
        // code here.
    }
};
